{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","INIT_DATA","useState","data","setData","clickedTime","setClickedTime","renderSlash","number","indicator","i","concat","className","map","item","index","onClick","tempClickedTime","temp","value","forEach","_item","_index","increaseLowerItems","increaseActiveItems","onClickEvent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGe,SAASA,IAEtB,IAAMC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAFf,EAIJC,mBAASD,GAJL,mBAIrBE,EAJqB,KAIfC,EAJe,OAKUF,mBAASD,GALnB,mBAKrBI,EALqB,KAKRC,EALQ,KAyCtBC,EAAc,SAACC,GAEnB,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAAYA,EAAUE,OAAO,KAG/B,OAAOF,GAQT,OACE,qCACA,qBAAKG,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACGT,EAAKU,KAAI,SAACC,EAAMC,GAAP,OACR,qBAAKH,UAAU,OAAf,SACE,yBAAQA,UAAU,MAAMI,QAAS,kBAtCtB,SAACF,EAAMC,GAC1B,IAAME,EAAe,YAAOZ,GAC5BY,EAAgBF,IAAU,EAC1BT,EAAeW,GAEf,IAAMC,EAAI,YAAOf,GAEbW,GAfqB,SAACI,EAAMC,GAChCD,EAAKE,SAAQ,SAACC,EAAOC,GACfD,GAASA,EAAQF,IACnBD,EAAKI,IAAW,MAalBC,CAAmBL,EAAMJ,GACzBI,EAAKH,GAAS,EACdX,EAAQc,KA1BgB,SAACA,GAC3BA,EAAKE,SAAQ,SAACC,EAAOC,GACfD,IACFH,EAAKI,IAAW,MAyBlBE,CAAoBN,GACpBA,EAAKH,GAAS,EACdX,EAAQc,IAwBqCO,CAAaX,EAAMC,IAA1D,UACE,6BAAKD,GAAQ,MACb,uBACA,+BAAOP,EAAYF,EAAYU,MAC/B,uBACA,+BAAOV,EAAYU,IAAU,UANNA,UAcjC,8BACI,wBAAQC,QAzBG,WACfZ,EAAQH,GACRK,EAAeL,IAuBX,0BAGJ,sBAAKW,UAAU,MAAf,UACE,kFACA,oaAGA,uSAEA,6JAEE,+BACE,8FACA,4HACA,8IC7FV,IAYec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7d863ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nexport default function App() {\n\n  const INIT_DATA = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  const [data, setData] = useState(INIT_DATA);\n  const [clickedTime, setClickedTime] = useState(INIT_DATA);\n\n  const increaseActiveItems = (temp) => {\n    temp.forEach((_item, _index) => {\n      if (_item) {\n        temp[_index] += 1;\n      }\n    });\n  };\n\n  const increaseLowerItems = (temp, value) => {\n    temp.forEach((_item, _index) => {\n      if (_item && _item < value) {\n        temp[_index] += 1;\n      }\n    });\n  };\n\n  const onClickEvent = (item, index) => {\n    const tempClickedTime = [...clickedTime];\n    tempClickedTime[index] += 1;\n    setClickedTime(tempClickedTime);\n\n    const temp = [...data];\n\n    if (item) {\n      increaseLowerItems(temp, item);\n      temp[index] = 1;\n      setData(temp);\n    } else {\n      increaseActiveItems(temp);\n      temp[index] = 1;\n      setData(temp);\n    }\n  };\n\n  const renderSlash = (number) => {\n    let indicator = \"\";\n    for (let i = 0; i < number; i++) {\n      indicator = indicator.concat(\"/\");\n    }\n\n    return indicator;\n  };\n\n  const resetAll = () => {\n    setData(INIT_DATA)\n    setClickedTime(INIT_DATA)\n  }\n\n  return (\n    <>\n    <div className=\"App\">\n      <div className=\"container\">\n        {data.map((item, index) => (\n          <div className=\"item\" key={index}>\n            <button className=\"btn\" onClick={() => onClickEvent(item, index)}>\n              <h3>{item || \".\"}</h3>\n              <br />\n              <span>{renderSlash(clickedTime[index])}</span>\n              <br />\n              <code>{clickedTime[index] || \".\"}</code>\n            </button>\n          </div>\n        ))}\n      </div>\n\n    </div>\n\n    <div>\n        <button onClick={resetAll}>Delete All</button>\n    </div>\n\n    <div className=\"tut\">\n      <h1>Lí do mà có cái thứ này. =))</h1>\n      <p>\n        Bảng này \"nhớ\" giúp các bạn trạng thái của các kết quả trước. Mỗi khi mảnh ghép xuất hiện hãy nhấn vào ô tương ứng trên bảng này để nó cập nhật và bạn hãy dựa theo kết quả cũ để mở game mới.\n      </p>\n      <p>\n        Số ở trên là thời gian lần cuối xuất hiện mảnh ghép. Số bên dưới là số lần đã xuất hiện mảnh ghép (dấu / chỉ là indicator cho dễ nhìn).</p>\n      <p>\n        Dựa theo khả năng xuất hiện là như nhau giữa 9 ô, hãy chọn ưu tiên:\n        <ul>\n          <li>Các ô chưa từng mở ra mảnh ghép</li>\n          <li>Các ô rất lâu chưa ra mảnh ghép (số to &gt; số nhỏ)</li>\n          <li>Các ô rất ít xuất hiện mảnh ghép (số nhỏ &gt; số to)</li>\n        </ul>\n      </p>\n    </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}